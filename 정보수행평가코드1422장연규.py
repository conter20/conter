# -*- coding: utf-8 -*-
"""Colaboratory에 오신 것을 환영합니다의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vaxz7lxJ8KnFKy4i_sq1qIlthZnZyNJA
"""

!pip install requests,BeautifulSoup,numpy,random,re
import requests
import random
import numpy
from bs4 import BeautifulSoup
import re

#웹 사이트에서 크롤링했습니다
def en_searchword(search_word):
    search_url='https://dic.daum.net/search.do?q={}'.format(search_word)
    response=requests.get(search_url).content
    html=BeautifulSoup(response,'html.parser') #데이터 끌어오기

    #끌어온 데이터 필요한 부분만 가져오기
    search_result=str(html.find('ul',attrs={"class":"list_search"}))
    search_result=search_result.replace('<ul class="list_search">',"")
    search_result=search_result.replace('<li><span class="num_search">',"")
    search_result=search_result.replace('</span>',"")
    search_result=search_result.replace('<span class="txt_search">',"")
    search_result=search_result.replace('</daum:word>',"")
    search_result=search_result.replace('</li>',"")
    search_result=search_result.replace('</ul>',"")

    #종료를 위한 while문
    while search_result.find('<')!=-1:
        index1=search_result.find('<')
        index2=search_result.find('>')
        search_result=search_result[:index1]+search_result[index2+1:]
        if search_result.find('<')==-1:
            break
    search_result=search_result.replace('\n'," ")
    search_result=search_result[1:][:-1]

    #결과 반환
    return search_result


#처음 사용하는 사람을 위한 튜토리얼 입니다.
#메뉴를 2개로 만들어 키를 입력받아 1번은 사용 목적 2번은 사용 설명서가 나오게했습니다.
#2차원 배열을 이용했습니다.
def tutorial():
  manual = [
        ["사용 목적", "이 프로그램은 영어 문장을 깊이 이해하기 위해 만들어졌습니다. 문장을 구성하는 단어의 뜻을 알아보고 쓰며 공부할 수 있습니다."],
        ["사용 설명서", "문장을 입력하면 모든 단어의 뜻이 나타납니다.", "그 중 알고 싶은 단어의 번호를 입력하세요.", "단어를 입력하면 그 단어의 뜻이 나옵니다."," 그 후 스펠링 입력과 뜻 입력을 하여 그 단어를 숙지합니다."]
    ]

  #반복문을 이용해 리스트 속 내용을 추출합니다.
  a=input("어떤 것을 알고 싶으신가요? [1번]사용 목적,[2번] 사용 설명서")
  if a=="1":
    for i in range(0,2):
      print(manual[0][i])
  elif a=="2":
    for i in range(0,4):
      print(manual[1][i])
  else:
    print("오류가 발생했습니다.")

#퀴즈를 내기 위한 함수입니다.
def quiz(qnum,split_sentence):
  qword=split_sentence[qnum]#찾는 단어를 할당합니다
  print(qword)
  qsearch=en_searchword(qword) #단어 뜻을 사전에서 크롤링합니다
  qsplit=qsearch.split() #배열로 만들어 출력때 사용합니다
  for i in qsplit:
    print(i)

  #단어 학습에 대한 코드입니다. 단어를 알파벳 단위로 쪼개 따라 쓰도록 합니다
  print("단어을 다시 써봅시다:")
  q_allsplit=list(qword)
  for i in q_allsplit:
    a=input(i+"/")
    if a != i:
      print("틀렸습니다.")#잘못 입력했을 경우

  #뜻 학습에 대한 코드입니다 뜻을 출력하고 따라 쓰게 합니다.
  print("뜻을 다시 써봅시다:")
  for i in qsplit:
    a=input(i+"/")

#문장학습을 위한 함수입니다
def sentence():
  sentence=input("알고 싶은 문장을 입력해 주세요:")#알고 싶은 문장을 입력받습니다.
  split_sentence=sentence=sentence.split()#문장 단어로 나누기
  count=len(split_sentence)# 문장 구성 단어 개수 세기

  #문장 분해할때 불필요한 부분들을 제거합니다.
  #re라는 라이브러리를 활용합니다.
  for i in range(0,count):
    split_sentence[i]= re.sub(r"[^a-zA-Z]", "", split_sentence[i])
    count=len(split_sentence)


  #중복되는 단어를 없앱니다
  set_data = set(split_sentence)
  split_sentence = list(set_data)

  #모든 단어를 출력하고 각각의 뜻을 차례대로 나열합니다
  #split_sentence라는 문장을 단어로 나눈 리스트 속의 요소를 하나씩 꺼내 출력합니다
  #꺼낸 단어의 뜻도 함께 en_searchword라는 함수를 이용해 검색한뒤에 출력합니다.
  for i in range(0,count):
    print("["+str(i+1)+"]"+split_sentence[i],end="\\")
    print(" " +en_searchword(split_sentence[i]))

  #문장 학습시에 지금 하고 있는 학습을 종료하고 초기화 할것인지 물어보는 문장입니다.
  #While 문이 S_end_sign이 참일때 문장 학습이 계속되며 거짓이 될 경우 중단됩니다.
  #다른 값을 입력받았을때도 마찬가지 입니다.
  S_end_sign=True
  while S_end_sign==True:
    qnum=int(input("원하는 단어의 번호를 입력해주세요:"))-1
    quiz(qnum,split_sentence)
    end_sign=input("종료하고 싶은가요?[예/아니오]:")
    if end_sign=="예":
      S_end_sign=False
    elif end_sign=="아니오":
      print("")
    else:
      print("잘못 입력하셨습니다.")
      S_end_sign=False









#가장 처음에 실행되는 코드로 어떤 메뉴를 선택할 것인지에 대해 입력받습니다.
#whie문으로 작동하며 오류가 날 경우 중단됩니다.
#while문 안에 if 문을 적어 중첩구조를 만들었습니다.
while True:
  a=input("문장 학습[1번],튜토리얼[2번]을 눌러주세요:")
  if a=="1":
    print("문장 학습을 시작합니다:")
    sentence()
  elif a=="2":
    print("튜토리얼을 시작합니다:")
    tutorial()
  else:
    break